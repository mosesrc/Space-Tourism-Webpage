@inject IJSRuntime JsRuntime
@using BlazorAnimate;

<div class="NavBar">
    <div><img class="logo" src="assets/shared/logo.svg"></div>
    <div class="line"></div>
    <div class="NavRect" data-visible="false">
        <ul>
            <li> <a href="/" @onclick="@(async () => { Home(); await ChangeBackground(); } )"> <span class="bold">00</span> <span>HOME</span> </a> </li>
            <li> <a href="destinations" @onclick="@(async () => { Destination(); await ChangeBackground(); } )"> <span class="bold">01</span> <span>DESTINATION</span> </a> </li>
            <li> <a href="crew-members" @onclick="@(async () => { Crew(); await ChangeBackground(); } )"> <span class="bold">02</span> <span>CREW</span> </a> </li>
            <li> <a href="technologies" @onclick="@(async () => { Technology(); await ChangeBackground(); } )"> <span class="bold">03</span> <span>TECHNOLOGY</span> </a> </li>
        </ul>
    </div>
    <button class="toggle-nav-icon" @onclick="ToggleNav" aria-controls="primary-navigation" aria-expanded="false" />
</div>

@code {
    public string bgUrl = string.Empty;
    Background htmlImg = new Background();
    private int screenSize;

    async Task ChangeBackground()
    {
       screenSize = await JsRuntime.InvokeAsync<int>(identifier: "viewportWidth");
       await JsRuntime.InvokeVoidAsync(identifier: "backgroundImgChange", bgUrl);
    }


    async Task ToggleNav()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "toggleNav");
    }


    public void Home()
    {
        bgUrl = htmlImg.CheckWidth(screenSize, "home");
    }

    public void Destination()
    {
        bgUrl = htmlImg.CheckWidth(screenSize, "destination");
    }

    public void Crew()
    {
        bgUrl = htmlImg.CheckWidth(screenSize, "crew");
    }

    public void Technology()
    {
        bgUrl = htmlImg.CheckWidth(screenSize, "technology");
    }
}
